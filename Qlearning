import numpy as np
import random

class QAgent:
    def __init__(self, price = 20, agents_n=3):
        self.slope = random.uniform(-1, 0)
        self.intercept = np.random.randint(50, 100)
        self.price = price   # Fixed price for all demands
        self.actions_n = 10  # Number of actions or demand points
        self.action_table = {}

    def generate_action_table(self, myactions, opponent_actions):
      action_table = {}

      opp1_demand = opponent_actions[0][0]
      opp2_demand = opponent_actions[0][1]

      for agent_action in myactions:
          action_table[agent_action] = {}
          for opp1_action in opp1_demand:
              for opp2_action in opp2_demand:
                  action_table[agent_action][(opp1_action, opp2_action)] = 0  # Initialize with None or any default value

      return action_table

    def update_action_table(self, k, action_table, current_action, opponent_current_action):
      opponent1_action = opponent_current_action[0]
      opponent2_action = opponent_current_action[1]
      action_table[k][current_action][(opponent1_action, opponent2_action)] += 1
      return action_table[k]

    def predict_opponents_actions(self, k, action_table, current_action):
        if current_action not in action_table[k]:
          return None, None  # Action does not exist

        max_value_opp1 = float('-inf')
        max_value_opp2 = float('-inf')
        max_action_opp1 = None
        max_action_opp2 = None

        for (opp1action, opp2action), value in action_table[k][current_action].items():
          if value > max_value_opp1:
            max_value_opp1 = value
            max_action_opp1 = opp1action
          if value > max_value_opp2:
            max_value_opp2 = value
            max_action_opp2 = opp2action

        max_tuple = (max_action_opp1, max_action_opp2)
        return max_tuple

    def choose_action(self, Q_table, myactions, current_state, time):
      epsilon = 0.1 ** (4 * time / 500000)
      if np.random.rand() < epsilon:
        return np.random.choice(myactions)
      else:
        return max(Q_table[current_state], key=Q_table[current_state].get)

    def get_state(self, current_action, opponent_action1, opponent_action2):
      state = (current_action, (opponent_action1, opponent_action2))
      return state
